name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest flake8 black
        pip install -r requirements.txt
        
    - name: Check code formatting
      run: |
        black --check src/ tests/ || (echo "❌ Code formatting issues found. Run 'black src/ tests/' to fix." && exit 1)
        
    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Create test environment
      run: |
        python -c "
        with open('.env', 'w') as f:
            f.write('OPENWEATHER_API_KEY=test_key\n')
        "
        python -c "import os; os.makedirs('data', exist_ok=True)"
        
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
        
    - name: Test application startup
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, os.getcwd())
        
        try:
            # Test critical imports
            from src.core.weather_service import WeatherService
            from src.models.weather_models import CurrentWeather
            from src.config.config import config_manager
            print('✅ Critical imports successful')
            
            # Test configuration
            config = config_manager.config
            print(f'✅ Configuration loaded: {config.ui.window_title}')
            
            print('🎉 PR validation passed!')
        except Exception as e:
            print(f'❌ PR validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅ Passed' : '❌ Failed';
          const message = '${{ job.status }}' === 'success' 
            ? '🎉 All checks passed! This PR is ready for review.'
            : '⚠️ Some checks failed. Please review the workflow logs.';
            
          const body = `## 🤖 PR Validation Results
          
          **Status**: ${status}
          
          ### Checks Performed:
          - ✅ Code formatting (Black)
          - ✅ Linting (Flake8)  
          - ✅ Unit tests (Pytest)
          - ✅ Application startup test
          
          ${message}
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
